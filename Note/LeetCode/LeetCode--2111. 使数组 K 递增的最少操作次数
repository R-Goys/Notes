[2111. 使数组 K 递增的最少操作次数](https://leetcode.cn/problems/minimum-operations-to-make-the-array-k-increasing/)

> 给你一个下标从 **0** 开始包含 `n` 个正整数的数组 `arr` ，和一个正整数 `k` 。
>
> 如果对于每个满足 `k <= i <= n-1` 的下标 `i` ，都有 `arr[i-k] <= arr[i]` ，那么我们称 `arr` 是 **K** **递增** 的。
>
> - 比方说，`arr = [4, 1, 5, 2, 6, 2]`对于 `k = 2` 是 K 递增的，因为：
>   - `arr[0] <= arr[2] (4 <= 5)`
>   - `arr[1] <= arr[3] (1 <= 2)`
>   - `arr[2] <= arr[4] (5 <= 6)`
>   - `arr[3] <= arr[5] (2 <= 2)`
> - 但是，相同的数组 `arr` 对于 `k = 1` 不是 K 递增的（因为 `arr[0] > arr[1]`），对于 `k = 3` 也不是 K 递增的（因为 `arr[0] > arr[3]` ）。
>
> 每一次 **操作** 中，你可以选择一个下标 `i` 并将 `arr[i]` **改成任意** 正整数。
>
> 请你返回对于给定的 `k` ，使数组变成 K 递增的 **最少操作次数** 。

---

将数组拆成 k 组，我们会发现每一组的修改都没有直接关系，我们可以直接遍历这几组，做最长非递减子序列问题，算出这几组的和，然后用总长度减去，就可以得到操作次数。

```go
func kIncreasing(arr []int, k int) int {
    n := len(arr)
    up := 0
    for i := 0; i < k && i < n; i ++ {
        f := make([]int, n / k + 2)
        Len := 0
        for j := i; j < n; j += k {
            l, r := 0, Len
            for l < r {
                mid := (l + r + 1) / 2
                if f[mid] > arr[j] {
                    r = mid - 1
                } else {
                    l = mid
                }
            }
            f[r + 1] = arr[j]
            Len = max(Len, r + 1)
        }
        up += Len
    }
    return n - up
}
```

