[2826. 将三个组排序](https://leetcode.cn/problems/sorting-three-groups/)

> 给你一个整数数组 `nums` 。`nums` 的每个元素是 1，2 或 3。在每次操作中，你可以删除 `nums` 中的一个元素。返回使 nums 成为 **非递减** 顺序所需操作数的 **最小值**。

---

相比于之前的最长上升子序列，这道题可以直接搬过来，但是这道题要求是非递减，将左边界变更的条件改一下，当小于等于的时候就直接变更，就可以得到正确的答案：

```go
func minimumOperations(nums []int) int {
    n := len(nums)
    f := make([]int, n + 1)
    Len := 0
    for i := 0; i < n; i ++ {
        l := 0
        r := Len
        for l < r {
            mid := (l + r + 1) / 2
            if f[mid] <= nums[i] {
                l = mid
            } else {
                r = mid - 1
            }
        }
        Len = max(Len, r + 1)
        f[r + 1] = nums[i]
    }
    return n - Len
}
```

由于数组中仅仅存在三种数字，所以使用上升子序列的优化办法反而还麻烦了：

```go
func minimumOperations(nums []int) int {
    n := len(nums)
    f := [4]int{}
    for i := 0; i < n; i ++ {
        f[nums[i]] = slices.Max(f[:nums[i] + 1]) + 1
    }
    return n - slices.Max(f[:])
}
```

